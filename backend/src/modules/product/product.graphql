type Product {
  id: ID!
  name: String!
  price: Float!
  categories: [Category!]!
  image: String
  enabled: Boolean!
}

input ProductInput {
  name: String!
  price: Float!
  categories: [String!]!
  image: String
  enabled: Boolean
}

input PaginationInput {
  page: Int = 1
  limit: Int = 10
  sortBy: String = "createdAt"
  sortOrder: SortOrder = DESC
}

enum SortOrder {
  ASC
  DESC
}

type PageInfo {
  currentPage: Int!
  totalPages: Int!
  totalItems: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  limit: Int!
}

type PaginatedProducts {
  items: [Product!]!
  pageInfo: PageInfo!
}

scalar Upload

type Mutation {
  createProduct(input: ProductInput!, file: Upload): Product!
  updateProduct(id: ID!, input: ProductInput!, file: Upload): Product!
  deleteProduct(id: ID!): Boolean!
  uploadProductImage(file: Upload!): String!
}

type Query {
  products(pagination: PaginationInput, search: String): PaginatedProducts!
  allProducts(search: String): [Product!]!
  product(id: ID!): Product
}
