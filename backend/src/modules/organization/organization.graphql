type Department {
  id: ID!
  name: String!
  description: String
  created_at: String!
  updated_at: String!
}

type Position {
  id: ID!
  name: String!
  description: String
  created_at: String!
  updated_at: String!
}

type Employee {
  id: ID!
  emp_code: String!
  name: String!
  phone: String
  national_id: String
  hire_date: String
  position: Position
  department: Department
  is_resigned: Boolean!
  created_at: String!
  updated_at: String!
}

type FingerprintTransaction {
  id: ID!
  emp_code: String!
  punch_time: String!
}

type FingerprintTransactionPage {
  items: [FingerprintTransaction!]!
  total: Int!
}

type Leave {
  id: ID!
  employee_id: ID!
  leave_type: String!
  start_time: String!
  end_time: String!
  reason: String
  leave_day: Float!
  status: String!
  created_at: String!
  updated_at: String!
}

type LeavePage {
  items: [Leave!]!
  total: Int!
}

type LeaveBalance {
  employee_id: ID!
  year: Int!
  entitlement: Float!
  used: Float!
  remaining: Float!
}

type Shift {
  id: ID!
  alias: String!
  in_time: String!
  out_time: String!
  day_index: Int!
  created_at: String!
  updated_at: String!
}

type ShiftSchedule {
  id: ID!
  employee_id: ID
  department_id: ID
  shift: Shift!
  start_date: String!
  end_date: String
  created_at: String!
  updated_at: String!
}

type AttendanceRow {
  id: ID!
  emp_code: String!
  name: String!
  clock_in: String
  clock_out: String
  status: String!
}

type Query {
  departments: [Department!]!
  department(id: ID!): Department
  positions: [Position!]!
  position(id: ID!): Position
  employees: [Employee!]!
  employee(id: ID!): Employee
  leaves(employeeId: ID, since: String, until: String): [Leave!]!
  leavesPage(
    employeeId: ID
    since: String
    until: String
    skip: Int
    take: Int
  ): LeavePage!
  leaveBalance(employeeId: ID!, year: Int): LeaveBalance!
  fingerprintTransactions(
    since: String
    limit: Int
    emp_code: String
  ): [FingerprintTransaction!]!
  fingerprintTransactionsPage(
    since: String
    skip: Int
    take: Int
    emp_code: String
  ): FingerprintTransactionPage!
  attendanceForDay(date: String!, skip: Int, take: Int): [AttendanceRow!]!
  shifts: [Shift!]!
  shiftSchedules(
    employeeId: ID
    departmentId: ID
    date: String
  ): [ShiftSchedule!]!
}

type Mutation {
  createDepartment(name: String!, description: String): Department!
  updateDepartment(id: ID!, name: String, description: String): Department!
  deleteDepartment(id: ID!): Boolean!

  createPosition(name: String!, description: String): Position!
  updatePosition(id: ID!, name: String, description: String): Position!
  deletePosition(id: ID!): Boolean!

  createEmployee(
    emp_code: String!
    name: String!
    phone: String
    national_id: String
    hire_date: String
    position_id: ID
    department_id: ID
  ): Employee!
  updateEmployee(
    id: ID!
    name: String
    phone: String
    national_id: String
    hire_date: String
    position_id: ID
    department_id: ID
    is_resigned: Boolean
  ): Employee!
  deleteEmployee(id: ID!): Boolean!
  createLeave(
    employee_id: ID!
    leave_type: String!
    start_time: String!
    end_time: String!
    leave_day: Float
    reason: String
  ): Leave!
  updateLeave(
    id: ID!
    leave_type: String
    start_time: String
    end_time: String
    reason: String
  ): Leave!
  changeLeaveStatus(id: ID!, status: String!): Leave!

  createShift(
    alias: String!
    in_time: String!
    out_time: String!
    day_index: Int!
  ): Shift!
  createShiftSchedule(
    employee_id: ID
    department_id: ID
    shift_id: ID!
    start_date: String!
    end_date: String
  ): ShiftSchedule!
  deleteShiftSchedule(id: ID!): Boolean!
}


