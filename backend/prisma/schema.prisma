// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 1. Permissions Table
// This lists all the specific actions a user can perform.
model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique // e.g., "product:create", "order:refund", "report:view:sales"
  description String? // A human-readable description of the permission
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles Role[] @relation("RolePermissions") // Many-to-many relationship with Role
}

// 2. Role Table (replaces the UserRole enum for User directly)
// Defines the roles and their associated permissions.
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique // e.g., "ADMIN", "MANAGER", "CASHIER" - maps to your UserRole enum names
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[] // One-to-many: a role can have many users
  permissions Permission[] @relation("RolePermissions")
}

// RefreshToken model for storing user refresh tokens
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([expiresAt])
}

// User model for authentication
model User {
  id            Int            @id @default(autoincrement())
  phone         String         @unique
  password      String
  username      String?        @unique
  display_name  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  roleId        Int            @default(1) // Foreign key to Role model
  role          Role           @relation(fields: [roleId], references: [id]) // Relation to the Role 
  refreshTokens RefreshToken[]

  @@index([roleId])
}


model Product {
  id          String   @id @default(cuid())
  name        String
  image      String?
  description String?
  price      Float
    enabled     Boolean   @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  categories  Category[]
  sets       Set[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  image      String?
  description String?
  products    Product[]
  parentId    String?  // For sub-category support
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  deleted_at  DateTime?
}

model Set {
  id          String   @id @default(cuid())
  name        String
  image      String?
  description String?
  products    Product[]
}
